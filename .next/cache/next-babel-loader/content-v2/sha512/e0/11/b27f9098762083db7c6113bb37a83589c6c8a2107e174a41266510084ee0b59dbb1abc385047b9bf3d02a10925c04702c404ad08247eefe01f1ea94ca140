{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/shubhamporiya/Documents/nextjs-project/pages/[meetupId]/index.js\";\nimport { MongoClient } from \"mongodb\";\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\n\nfunction MeetupDetails(props) {\n  return /*#__PURE__*/_jsxDEV(MeetupDetail, {\n    image: \"https://media.cntraveler.com/photos/5d8cf7d5db6acf000833e6cc/master/pass/Eiffel-Tower_GettyImages-1060266626.jpg\",\n    alt: \"First meetup\",\n    title: \"First Meet Up\",\n    address: \"Street 123\",\n    description: \"Good location for first meetup\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 5\n  }, this);\n} // IMP: getStaticPaths is used for dynamic paths ot be rendered on the static pages.\n\n\nexport async function getStaticPaths() {\n  const client = await MongoClient.connect(\"mongodb+srv://mongoose-mongodb:1234@cluster0.qwybnjp.mongodb.net/meetups?retryWrites=true&w=majority\");\n  const db = client.db();\n  const meetupsCollection = db.collection(\"meetups\");\n  const meetups = await meetupsCollection.find({}, {\n    _id: 1\n  }).toArray();\n  client.close();\n  return {\n    fallback: false,\n    paths: meetups.map(meetup => ({\n      params: {\n        meetupId: meetup._id.toString()\n      }\n    }))\n  };\n}\nexport async function getStaticProps(context) {\n  // fetch data for meetup individual\n  const meetupId = context.params.meetupId; // we only see the log in terminal and not on browser console as it is only executed on server side.\n\n  const client = await MongoClient.connect(\"mongodb+srv://mongoose-mongodb:1234@cluster0.qwybnjp.mongodb.net/meetups?retryWrites=true&w=majority\");\n  const db = client.db();\n  const meetupsCollection = db.collection(\"meetups\");\n  const selectedMeetups = await meetupsCollection.findOne({\n    _id: meetupId\n  });\n  client.close();\n  return {\n    props: {\n      meetupData: selectedMeetups\n    }\n  };\n}\nexport default MeetupDetails;","map":{"version":3,"sources":["/Users/shubhamporiya/Documents/nextjs-project/pages/[meetupId]/index.js"],"names":["MongoClient","MeetupDetail","MeetupDetails","props","getStaticPaths","client","connect","db","meetupsCollection","collection","meetups","find","_id","toArray","close","fallback","paths","map","meetup","params","meetupId","toString","getStaticProps","context","selectedMeetups","findOne","meetupData"],"mappings":";;AAAA,SAASA,WAAT,QAA4B,SAA5B;AAEA,OAAOC,YAAP,MAAyB,uCAAzB;;AAEA,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAC5B,sBACE,QAAC,YAAD;AACE,IAAA,KAAK,EAAC,kHADR;AAEE,IAAA,GAAG,EAAC,cAFN;AAGE,IAAA,KAAK,EAAC,eAHR;AAIE,IAAA,OAAO,EAAC,YAJV;AAKE,IAAA,WAAW,EAAC;AALd;AAAA;AAAA;AAAA;AAAA,UADF;AASD,C,CAED;;;AAEA,OAAO,eAAeC,cAAf,GAAgC;AACrC,QAAMC,MAAM,GAAG,MAAML,WAAW,CAACM,OAAZ,CACnB,sGADmB,CAArB;AAGA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AAEA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AAEA,QAAMC,OAAO,GAAG,MAAMF,iBAAiB,CAACG,IAAlB,CAAuB,EAAvB,EAA2B;AAAEC,IAAAA,GAAG,EAAE;AAAP,GAA3B,EAAuCC,OAAvC,EAAtB;AAEAR,EAAAA,MAAM,CAACS,KAAP;AAEA,SAAO;AACLC,IAAAA,QAAQ,EAAE,KADL;AAELC,IAAAA,KAAK,EAAEN,OAAO,CAACO,GAAR,CAAaC,MAAD,KAAa;AAC9BC,MAAAA,MAAM,EAAE;AAAEC,QAAAA,QAAQ,EAAEF,MAAM,CAACN,GAAP,CAAWS,QAAX;AAAZ;AADsB,KAAb,CAAZ;AAFF,GAAP;AAMD;AAED,OAAO,eAAeC,cAAf,CAA8BC,OAA9B,EAAuC;AAC5C;AACA,QAAMH,QAAQ,GAAGG,OAAO,CAACJ,MAAR,CAAeC,QAAhC,CAF4C,CAG5C;;AACA,QAAMf,MAAM,GAAG,MAAML,WAAW,CAACM,OAAZ,CACnB,sGADmB,CAArB;AAGA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AAEA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AAEA,QAAMe,eAAe,GAAG,MAAMhB,iBAAiB,CAACiB,OAAlB,CAA0B;AAAEb,IAAAA,GAAG,EAAEQ;AAAP,GAA1B,CAA9B;AAEAf,EAAAA,MAAM,CAACS,KAAP;AAEA,SAAO;AACLX,IAAAA,KAAK,EAAE;AACLuB,MAAAA,UAAU,EAAEF;AADP;AADF,GAAP;AAKD;AAED,eAAetB,aAAf","sourcesContent":["import { MongoClient } from \"mongodb\";\n\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\n\nfunction MeetupDetails(props) {\n  return (\n    <MeetupDetail\n      image=\"https://media.cntraveler.com/photos/5d8cf7d5db6acf000833e6cc/master/pass/Eiffel-Tower_GettyImages-1060266626.jpg\"\n      alt=\"First meetup\"\n      title=\"First Meet Up\"\n      address=\"Street 123\"\n      description=\"Good location for first meetup\"\n    />\n  );\n}\n\n// IMP: getStaticPaths is used for dynamic paths ot be rendered on the static pages.\n\nexport async function getStaticPaths() {\n  const client = await MongoClient.connect(\n    \"mongodb+srv://mongoose-mongodb:1234@cluster0.qwybnjp.mongodb.net/meetups?retryWrites=true&w=majority\"\n  );\n  const db = client.db();\n\n  const meetupsCollection = db.collection(\"meetups\");\n\n  const meetups = await meetupsCollection.find({}, { _id: 1 }).toArray();\n\n  client.close();\n\n  return {\n    fallback: false,\n    paths: meetups.map((meetup) => ({\n      params: { meetupId: meetup._id.toString() },\n    })),\n  };\n}\n\nexport async function getStaticProps(context) {\n  // fetch data for meetup individual\n  const meetupId = context.params.meetupId;\n  // we only see the log in terminal and not on browser console as it is only executed on server side.\n  const client = await MongoClient.connect(\n    \"mongodb+srv://mongoose-mongodb:1234@cluster0.qwybnjp.mongodb.net/meetups?retryWrites=true&w=majority\"\n  );\n  const db = client.db();\n\n  const meetupsCollection = db.collection(\"meetups\");\n\n  const selectedMeetups = await meetupsCollection.findOne({ _id: meetupId });\n\n  client.close();\n\n  return {\n    props: {\n      meetupData: selectedMeetups,\n    },\n  };\n}\n\nexport default MeetupDetails;\n"]},"metadata":{},"sourceType":"module"}